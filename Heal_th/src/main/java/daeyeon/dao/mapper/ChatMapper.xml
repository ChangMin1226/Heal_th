<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="daeyeon.dao.face.ChatDao"> 
	
	<!-- /chat/intro --> 
	<!-- 조회할 3이상인 멘토 회원리스트 개수 조회하기 -->
	<select id="selectCntAll" resultType="int" parameterType="Users">
		SELECT count(*) FROM photofile e
	    FULL JOIN
	       ( SELECT * FROM USERS 
				WHERE ranking_no >= 3
	            AND user_no != #{userNo } AND user_no NOT IN 
	            (SELECT d.user_no FROM users d      
	                INNER JOIN (SELECT a.* FROM room_list a             
	                    INNER JOIN (
	                        SELECT * FROM room_list WHERE user_no = #{userNo } ) b 
	                    ON a.room_no = b.room_no
	                WHERE a.user_no != #{userNo }) c
				ON d.user_no = c.user_no)
	        ORDER BY user_no ) f
	    ON e.user_no = f.user_no 
	    WHERE f.user_no IS NOT NULL
	</select>
	
	
	<!-- /chat/intro -->
	<!-- 회원 등급 3이상인 회원 조회하기 -->
	<select id="selectUsers" resultType="yerim.dto.Users" parameterType="chatIntroPaging">
		SELECT * FROM (
		SELECT rownum rnum, R.* FROM (
			SELECT f.*, e.stored_name FROM photofile e
		    FULL JOIN
		       ( SELECT * FROM USERS 
					WHERE ranking_no >= 3
		            AND user_no != #{userNo } AND user_no NOT IN 
		            (SELECT d.user_no FROM users d      
		                INNER JOIN (SELECT a.* FROM room_list a             
		                    INNER JOIN (
		                        SELECT * FROM room_list WHERE user_no = #{userNo } ) b 
		                    ON a.room_no = b.room_no
		                WHERE a.user_no != #{userNo }) c
					ON d.user_no = c.user_no)
		        ORDER BY user_no ) f
		    ON e.user_no = f.user_no 
		    WHERE f.user_no IS NOT NULL
			) R
		) RECORD
		WHERE rnum BETWEEN #{startNo } AND #{endNo }
	</select> 
	
	
	<!-- /chat/intro -->
	<!-- 검색된 회원 등급 3이상인 회원 조회하기 -->
	<select id="selectSearchCntAll" resultType="int" parameterType="chatIntroPaging">
		SELECT count(*) FROM photofile e
	    FULL JOIN
	       ( SELECT * FROM USERS 
				WHERE ranking_no >= 3
	            AND user_no != #{userNo } AND user_no NOT IN 
	            (SELECT d.user_no FROM users d      
	                INNER JOIN (SELECT a.* FROM room_list a             
	                    INNER JOIN (
	                        SELECT * FROM room_list WHERE user_no = #{userNo } ) b 
	                    ON a.room_no = b.room_no
	                WHERE a.user_no != #{userNo }) c
				ON d.user_no = c.user_no)
	        ORDER BY user_no ) f
	    ON e.user_no = f.user_no 
	    WHERE f.user_no IS NOT NULL
	    <choose>
			<when test="type != null and type.equals('userNick')">
				AND user_nick LIKE '%' || #{keyword } || '%'
			</when>
			<when test="type != null and type.equals('userJob')">
				AND user_job LIKE '%' || #{keyword } || '%'
			</when>
		</choose>
	</select>
	
	
	<select id="selectSearchUsers" resultType="Users" parameterType="chatIntroPaging" >
		SELECT * FROM (
			SELECT rownum rnum, R.* FROM (	
				SELECT * FROM photofile e
			    FULL JOIN
			       ( SELECT * FROM USERS 
						WHERE ranking_no >= 3
			            AND user_no != #{userNo } AND user_no NOT IN 
			            (SELECT d.user_no FROM users d      
			                INNER JOIN (SELECT a.* FROM room_list a             
			                    INNER JOIN (
			                        SELECT * FROM room_list WHERE user_no = #{userNo } ) b 
			                    ON a.room_no = b.room_no
			                WHERE a.user_no != #{userNo }) c
						ON d.user_no = c.user_no)
			        ORDER BY user_no ) f
			    ON e.user_no = f.user_no 
			    WHERE f.user_no IS NOT NULL
			    <choose>
					<when test="type != null and type.equals('userNick')">
						AND user_nick LIKE '%' || #{keyword } || '%'
					</when>
					<when test="type != null and type.equals('userJob')">
						AND user_job LIKE '%' || #{keyword } || '%'
					</when>
				</choose>
				) R
			) RECORD
		WHERE rnum BETWEEN #{startNo } AND #{endNo }
	</select>
	
	
	<!-- /chat/pointCompare -->
	<!-- 내 포인트 얻어오기 -->
	<select id="selectMyPoint" resultType="int" parameterType="Users">
		SELECT point FROM USERS
		WHERE user_no = #{userNo }
	</select>


	<!-- /chat/createChatRoom -->
	<!-- 상대방 포인트 증가시키기 -->
	<update id="updateYourPoint" parameterType="Users">
		UPDATE USERS SET point = 
			CASE 
			WHEN #{rankingNo } = 5 THEN point+1000
			WHEN #{rankingNo } = 4 THEN point+700
			WHEN #{rankingNo } = 3 THEN point+400
			END
		WHERE user_no = #{userNo }
	</update>
	
	
	<!-- /chat/createChatRoom -->
	<!-- 자신의 포인트 감소시키기 -->
	<update id="updateMyPoint" parameterType="Users">
		UPDATE USERS SET point = 
			CASE 
			WHEN #{rankingNo } = 5 THEN point-1000
			WHEN #{rankingNo } = 4 THEN point-700
			WHEN #{rankingNo } = 3 THEN point-400
			END
		WHERE user_no = #{userNo }
	</update>
	

	<!-- /chat/createChatRoom -->
	<!-- 채팅방 만들기 -->
	<insert id="insertChatRoom" parameterType="ChatRoom">
			<selectKey resultType="int" keyProperty="roomNo" order="BEFORE">
				SELECT chat_room_seq.nextval FROM DUAL
			</selectKey>
			INSERT INTO chat_room (room_no, create_date)
			VALUES ( chat_room_seq.currval, sysdate )
	</insert>


	<!-- /chat/createChatRoom -->
	<!-- 로그인한 자신의 채팅방리스트 만들기 -->
	<insert id="insertChatListByMy" parameterType="ChatRoom">
		INSERT INTO room_list (chat_list_no, user_no, room_no)
		VALUES ( room_list_seq.nextval, #{userNo }, #{roomNo } )
	</insert>

	<!-- /chat/createChatRoom -->
	<!-- 상대방의 채팅방리스트 만들기 -->
	<insert id="insertChatListByYou" parameterType="ChatRoom">
		INSERT INTO room_list (chat_list_no, user_no, room_no)
		VALUES ( room_list_seq.nextval, #{userNo }, #{roomNo } )
	</insert>
	
	
	<!-- /chat/chatRoom -->
	<!-- 자신의 회원번호가 속한 채팅방번호와 상대방 닉네임과 그사람과의 마지막채팅 조회하기 -->
	<select id="selectRoomList"  resultType="daeyeon.dto.RoomList" parameterType="Users">
		SELECT DISTINCT h.stored_name, g.user_no, g.chat_time, g.room_no, g.user_nick FROM photofile h
			INNER JOIN
			( SELECT user_no, chat_time, room_no, user_nick FROM (
				SELECT user_no, room_no, chat_time, user_nick,
					RANK() OVER (PARTITION BY room_no ORDER BY chat_time DESC) AS RNK
					FROM ( SELECT e.user_no, e.room_no, e.user_nick, f.chat_time
							FROM
						       ( SELECT c.room_no, d.user_nick, d.user_no FROM users d      
						            INNER JOIN
						                (SELECT a.* FROM room_list a             
						                   INNER JOIN (
											SELECT * FROM room_list WHERE user_no = #{userNo } ) b 
										ON a.room_no = b.room_no
									WHERE a.user_no != #{userNo } ) c
								 ON d.user_no = c.user_no
							ORDER BY c.room_no DESC ) e
						FULL JOIN chat f
					ON e.room_no = f.room_no ) )
				WHERE RNK = 1 ) g
		ON h.user_no = g.user_no 
		ORDER BY chat_time DESC NULLS FIRST
	</select>
	
	
	<!-- /chat/chatRoom -->
	<!-- 마지막 채팅내역과 채팅방 번호 조회 -->
	<select id="selectLastChat" resultType="Chat">
		SELECT chat_contents, room_no, chat_time FROM (
			SELECT chat_contents, room_no, chat_time,
    		RANK() OVER (PARTITION BY room_no ORDER BY chat_time DESC) AS RNK
    		FROM chat )
		WHERE RNK = 1
	</select>

	
	<!-- /chat/chatArea -->
	<!-- 전달받은 방번호로 상대방 닉네임 조회하기 -->
	<select id="selectReciverNick" resultType="string" parameterType="RoomList">
		SELECT a.user_nick FROM users a
			INNER JOIN (
			SELECT * FROM room_list WHERE room_no = #{roomNo }) b
		ON a.user_no = b.user_no
		WHERE a.user_no != #{userNo }
	</select>
	
	<!-- /chat/chatArea -->
	<!-- 방번호로 상대방 프로필 사진 가져오기 -->
	<select id="selectReciverProfile" resultType="string" parameterType="RoomList">
		SELECT d.stored_name FROM photofile d
    		INNER JOIN 
      		( SELECT a.user_no FROM users a
				INNER JOIN (
				SELECT * FROM room_list WHERE room_no = #{roomNo }) b
			ON a.user_no = b.user_no
			WHERE a.user_no != #{userNo } ) c
		ON d.user_no = c.user_no
	</select>
	
	<!-- /chat/chatArea -->
	<!-- 내 유저번호로 내 닉네임 조회하기 -->
	<select id="selectSenderNick" resultType="string" parameterType="int" >
		SELECT user_nick FROM users
		WHERE user_no = #{myUserNo }
	</select>
	
	

	
	<!-- /chat/chatArea -->
	<!-- 채팅내용 테이블에 저장하기 -->
	<insert id="insertChat" parameterType="chat">
		INSERT INTO chat( chat_no, chat_time, chat_contents, room_no, user_no )
		VALUES ( chat_seq.nextval, to_char(sysdate, 'yyyy.mm.dd hh24:mi:ss'), #{chatContents }, #{roomNo }, #{userNo }  )
	</insert>
	
	<!-- /chat/chatArea -->
	<!-- 채팅방번호로 채팅내용 조회하기 -->
	<select id="selectChat" resultType="Chat" parameterType="RoomList" >
		SELECT * FROM chat
		WHERE room_no = #{roomNo }
		ORDER BY chat_no ASC
	</select>
	
	<!-- chat테이블의 마지막 chat_no구하기 -->
	<select id="selectChatNo" resultType="int">
		select max(chat_no) FROM chat
	</select>
	
	<!-- /chat/fileup -->
	<!-- 첨부파일 테이블에 저장하기 -->
	<insert id="insertFile" parameterType="chatFile">
		INSERT INTO chat_file( file_no, chat_no, user_no, origin_name, stored_name, upload_date )
		VALUES ( chat_file_seq.nextval, #{chatNo }, #{userNo }, #{originName }, #{storedName }, to_char(sysdate, 'yyyy.mm.dd hh24:mi:ss') )
	</insert>
	
	
	
	<!-- 메인페이지에서 사용할 Top3 유저 -->
	<select id="selectTopUsers" resultType="Users">
		SELECT a.user_no, a.user_nick, a.ranking_no, a.user_intro, a.user_job, a.point , b.stored_name FROM photofile b
	    	FULL JOIN (
	        	SELECT rownum, a.* from (
	        		SELECT user_no, user_nick, ranking_no, user_intro, user_job, point FROM users
				ORDER BY point DESC ) a
				<![CDATA[
				WHERE rownum < 4
				]]>
	    	) a
			ON b.user_no = a.user_no
		WHERE a.user_no IS NOT NULL
	</select>
	
	
	
</mapper>








